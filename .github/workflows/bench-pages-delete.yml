name: Bench (Pages cleanup on branch delete)

on:
  delete:
    branches:
      - "**"

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      # Deleted ref, e.g. "refs/heads/feature/foo"
      DELETED_REF: ${{ github.event.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Normalize slug exactly like the publisher (replace slashes/spaces)
      - name: Compute branch slug
        id: slug
        shell: bash
        run: |
          set -e
          # Strip refs/heads/ prefix if present
          RAW="${DELETED_REF#refs/heads/}"
          # Replace / and spaces with -
          SAFE="$(echo "${RAW}" | sed 's#[/ ]#-#g')"
          echo "raw=${RAW}" >> "$GITHUB_OUTPUT"
          echo "safe=${SAFE}" >> "$GITHUB_OUTPUT"

      # Pull current gh-pages into .site/
      - name: Pull gh-pages
        shell: bash
        run: |
          set -e
          rm -rf .site
          mkdir -p .site
          if git ls-remote --exit-code origin gh-pages &>/dev/null; then
            git fetch origin gh-pages:gh-pages
            git worktree add --detach ghp-tmp gh-pages
            rsync -a ghp-tmp/ .site/ || true
            rm -rf ghp-tmp
            git worktree prune
          fi

      # Remove the branch folder and rebuild the index
      - name: Remove branch folder & rebuild index
        shell: bash
        env:
          BRANCH_SLUG_SAFE: ${{ steps.slug.outputs.safe }}
        run: |
          set -e
          # Remove the branch path that the publisher used (safe slug)
          rm -rf ".site/branches/${BRANCH_SLUG_SAFE}"

          # Ensure branches dir exists so the loop doesn't error
          mkdir -p .site/branches

          # Rebuild top-level index
          {
            echo '<!doctype html><meta charset="utf-8">'
            echo '<title>Bench Reports</title>'
            echo '<h1>Bench Reports</h1>'
            echo '<ul>'
            for d in .site/branches/*; do
              [ -d "$d" ] || continue
              b=$(basename "$d")
              first=$(find "$d" -maxdepth 2 -type f -path '*/report/index.html' | head -n1)
              if [ -n "$first" ]; then
                rel=${first#.site/}
                echo "<li><a href=\"$rel\">$b</a></li>"
              else
                echo "<li><a href=\"branches/$b/\">$b</a></li>"
              fi
            done
            echo '</ul>'
          } > .site/index.html

      - name: Push updated site
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .site
          publish_branch: gh-pages
          keep_files: true
